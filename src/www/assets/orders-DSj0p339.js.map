{"version":3,"file":"orders-DSj0p339.js","sources":["../../src/pages/Orders.tsx","../../src/routes/orders.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Search, Eye, Package } from 'lucide-react'\nimport { format } from 'date-fns'\nimport api from '@/lib/api'\n\ninterface Order {\n  id: string\n  userId: string\n  customerName: string\n  customerEmail: string\n  total: number\n  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled'\n  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded'\n  shippingAddress: {\n    street: string\n    city: string\n    state: string\n    zipCode: string\n    country: string\n  }\n  items: Array<{\n    productId: string\n    productName: string\n    quantity: number\n    price: number\n  }>\n  createdAt: string\n  updatedAt: string\n}\n\nconst statusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  processing: 'bg-blue-100 text-blue-800',\n  shipped: 'bg-purple-100 text-purple-800',\n  delivered: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800',\n}\n\nconst paymentStatusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  paid: 'bg-green-100 text-green-800',\n  failed: 'bg-red-100 text-red-800',\n  refunded: 'bg-gray-100 text-gray-800',\n}\n\nexport default function Orders() {\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const { data: orders, isLoading } = useQuery({\n    queryKey: ['orders', searchTerm],\n    queryFn: async () => {\n      const params = searchTerm ? { search: searchTerm } : {}\n      const response = await api.get('/admin/orders', { params })\n      return response.data.orders as Order[]\n    },\n  })\n\n  const filteredOrders = orders?.filter(order =>\n    order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.customerEmail.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || []\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Orders</h1>\n        <p className=\"text-muted-foreground\">\n          Manage customer orders and fulfillment\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search orders...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-8\"\n          />\n        </div>\n      </div>\n\n      {/* Orders List */}\n      <div className=\"space-y-4\">\n        {filteredOrders.map((order) => (\n          <Card key={order.id}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg\">\n                    Order #{order.id.slice(0, 8)}\n                  </CardTitle>\n                  <CardDescription>\n                    {order.customerName} â€¢ {order.customerEmail}\n                  </CardDescription>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[order.status]}`}>\n                    {order.status}\n                  </span>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${paymentStatusColors[order.paymentStatus]}`}>\n                    {order.paymentStatus}\n                  </span>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Order Details</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Total: <span className=\"font-medium\">${order.total}</span>\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Items: {order.items.length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Date: {format(new Date(order.createdAt), 'MMM dd, yyyy')}\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">Shipping Address</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {order.shippingAddress.street}<br />\n                    {order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}<br />\n                    {order.shippingAddress.country}\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">Items</h4>\n                  <div className=\"space-y-1\">\n                    {order.items.slice(0, 3).map((item, index) => (\n                      <p key={index} className=\"text-sm text-muted-foreground\">\n                        {item.quantity}x {item.productName}\n                      </p>\n                    ))}\n                    {order.items.length > 3 && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        +{order.items.length - 3} more items\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredOrders.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Package className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No orders found</h3>\n            <p className=\"text-muted-foreground text-center\">\n              {searchTerm\n                ? `No orders match \"${searchTerm}\"`\n                : \"No orders have been placed yet\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}","import { createFileRoute } from '@tanstack/react-router'\nimport Orders from '@/pages/Orders'\n\nexport const Route = createFileRoute('/orders')({\n  component: Orders,\n})"],"names":["statusColors","paymentStatusColors","Orders","searchTerm","setSearchTerm","useState","orders","isLoading","useQuery","params","api","filteredOrders","order","jsxDEV","Search","Input","e","Card","CardHeader","CardTitle","CardDescription","Button","Eye","CardContent","format","item","index","Package","SplitComponent"],"mappings":"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"}